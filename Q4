import java.io.*;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class AvgExecutionTime {
    public static void main(String[] args) throws ParseException {
        try {
            FileInputStream input2 = null;
            List<String> jobAllocateList = new ArrayList<>();
            List<String> jobDoneList = new ArrayList<>();
            List<Duration> totalWorkDuration = new ArrayList<>();
            long totalDuration = 0; 
            int jobCount = 0;
            LocalDateTime endTime;
            LocalDateTime startTime;
            FileInputStream input;

            input = new FileInputStream("extractedlog.txt"); 
            Scanner k = new Scanner(input);

            while (k.hasNextLine()) {
                String line = k.nextLine();
                if (line.contains("Allocate")) {
                    int index = line.indexOf("JobId=");
                    int endIndex = line.indexOf(" ", index);
                    String jobId = line.substring(index + 6, endIndex);
                    jobAllocateList.add(jobId + " " + line.split(" ")[0]);
                }
                if (line.contains("done")) {
                    int index = line.indexOf("JobId=");
                    int endIndex = line.indexOf(" ", index);
                    String jobId = line.substring(index + 6, endIndex);
                    jobDoneList.add(jobId + " " + line.split(" ")[0]);
                }
            }

            k.close();

            String timeFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS";
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(timeFormat);
            SimpleDateFormat sdf = new SimpleDateFormat(timeFormat);
            
            for (String allocate : jobAllocateList) {
                for (String done : jobDoneList) {
                    if (allocate.startsWith(done.split(" ")[0])) {
                        startTime = LocalDateTime.parse(allocate.split(" ")[1].replace("[","").replace("]",""), formatter);
                        endTime = LocalDateTime.parse(done.split(" ")[1].replace("[","").replace("]",""), formatter);
                        Duration duration = Duration.between(startTime, endTime);
                        totalWorkDuration.add(duration);
                        totalDuration += duration.toMillis();
                        jobCount++;
                        break;
                    }
                }
            }
            long averageDuration = totalDuration / jobCount;
            long averageDurationInSeconds = averageDuration / 1000;
            long averageDurationInMinutes = averageDurationInSeconds / 60;
            long averageDurationInHours = averageDurationInMinutes / 60;
            long remainingMinutes = averageDurationInMinutes % 60;
            long remainingSeconds = averageDurationInSeconds % 60;
            System.out.printf("%-30s %-30s\n", "Number of jobs executed :", jobCount);
            System.out.printf("%-30s %-30s\n", "Total Duration          :", totalDuration + " milliseconds");
            System.out.printf("%-30s %-30s\n", "Average Duration        :", averageDuration + " milliseconds");
            System.out.println("Average Job Duration    :      " + averageDurationInHours + " hours " + remainingMinutes + " minutes " + remainingSeconds + " seconds");

        } catch (FileNotFoundException ex) {
            System.out.println("File Not Found");
        }
    }
}
